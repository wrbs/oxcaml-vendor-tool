--- a/runtime/js/domain.js
+++ b/runtime/js/domain.js
@@ -99,6 +99,14 @@
   return r;
 }

+//Provides: caml_atomic_set
+//Version: >= 5
+function caml_atomic_set(ref, v) {
+  var r = ref[1];
+  ref[1] = v;
+  return 0;
+}
+
 //Provides: caml_atomic_make_contended
 //Version: >= 5.2
 function caml_atomic_make_contended(a) {
@@ -175,3 +183,78 @@
 function caml_ml_domain_cpu_relax(unit) {
   return 0;
 }
+
+//Provides: caml_atomic_load_field
+//Version: >= 5
+function caml_atomic_load_field(ref, field) {
+  return ref[field + 1];
+}
+
+//Provides: caml_atomic_add_field
+//Version: >= 5
+function caml_atomic_add_field(ref, field, i) {
+  var old = ref[field + 1];
+  ref[field + 1] += i;
+  return 0;
+}
+
+//Provides: caml_atomic_fetch_add_field
+//Version: >= 5
+function caml_atomic_fetch_add_field(ref, field, i) {
+  var old = ref[field + 1];
+  ref[field + 1] += i;
+  return old;
+}
+
+//Provides: caml_atomic_cas_field
+//Version: >= 5
+function caml_atomic_cas_field(ref, field, o, n) {
+  if (ref[field + 1] === o) {
+    ref[field + 1] = n;
+    return 1;
+  }
+  return 0;
+}
+
+//Provides: caml_atomic_set_field
+//Version: >= 5
+function caml_atomic_set_field(ref, field, v) {
+  ref[field + 1] = v;
+  return 0;
+}
+
+//Provides: caml_atomic_exchange_field
+//Version: >= 5
+function caml_atomic_exchange_field(ref, field, v) {
+  var old = ref[field + 1];
+  ref[field + 1] = v;
+  return old;
+}
+
+//Provides: caml_atomic_sub_field
+//Version: >= 5
+function caml_atomic_sub_field(ref, field, i) {
+  ref[field + 1] -= i;
+  return 0;
+}
+
+//Provides: caml_atomic_land_field
+//Version: >= 5
+function caml_atomic_land_field(ref, field, i) {
+  ref[field + 1] &= i;
+  return 0;
+}
+
+//Provides: caml_atomic_lor_field
+//Version: >= 5
+function caml_atomic_lor_field(ref, field, i) {
+  ref[field + 1] |= i;
+  return 0;
+}
+
+//Provides: caml_atomic_lxor_field
+//Version: >= 5
+function caml_atomic_lxor_field(ref, field, i) {
+  ref[field + 1] ^= i;
+  return 0;
+}
--- a/runtime/wasm/domain.wat
+++ b/runtime/wasm/domain.wat
@@ -131,6 +131,15 @@
       (array.set $block (local.get $b) (i32.const 1) (local.get $v))
       (local.get $r))

+   (func (export "caml_atomic_set")
+      (param $ref (ref eq)) (param $v (ref eq)) (result (ref eq))
+      (local $b (ref $block))
+      (local $r (ref eq))
+      (local.set $b (ref.cast (ref $block) (local.get $ref)))
+      (local.set $r (array.get $block (local.get $b) (i32.const 1)))
+      (array.set $block (local.get $b) (i32.const 1) (local.get $v))
+      (ref.i31 (i32.const 0)))
+
    (func (export "caml_atomic_make_contended")
       (param $v (ref eq)) (result (ref eq))
       (array.new_fixed $block 2 (ref.i31 (i32.const 0)) (local.get $v)))
@@ -220,4 +229,123 @@

    (func (export "caml_ml_domain_cpu_relax") (param (ref eq)) (result (ref eq))
       (ref.i31 (i32.const 0)))
+
+   ;; Atomic field operations
+   (func (export "caml_atomic_load_field")
+      (param $ref (ref eq)) (param $field (ref eq)) (result (ref eq))
+      (array.get $block
+         (ref.cast (ref $block) (local.get $ref))
+         (i32.add (i31.get_s (ref.cast (ref i31) (local.get $field))) (i32.const 1))))
+
+   (func (export "caml_atomic_fetch_add_field")
+      (param $ref (ref eq)) (param $field (ref eq)) (param $i (ref eq)) (result (ref eq))
+      (local $b (ref $block))
+      (local $idx i32)
+      (local $old (ref eq))
+      (local.set $b (ref.cast (ref $block) (local.get $ref)))
+      (local.set $idx (i32.add (i31.get_s (ref.cast (ref i31) (local.get $field))) (i32.const 1)))
+      (local.set $old (array.get $block (local.get $b) (local.get $idx)))
+      (array.set $block (local.get $b) (local.get $idx)
+         (ref.i31 (i32.add (i31.get_s (ref.cast (ref i31) (local.get $old)))
+                           (i31.get_s (ref.cast (ref i31) (local.get $i))))))
+      (local.get $old))
+
+   (func (export "caml_atomic_add_field")
+      (param $ref (ref eq)) (param $field (ref eq)) (param $i (ref eq)) (result (ref eq))
+      (local $b (ref $block))
+      (local $idx i32)
+      (local $old (ref eq))
+      (local.set $b (ref.cast (ref $block) (local.get $ref)))
+      (local.set $idx (i32.add (i31.get_s (ref.cast (ref i31) (local.get $field))) (i32.const 1)))
+      (local.set $old (array.get $block (local.get $b) (local.get $idx)))
+      (array.set $block (local.get $b) (local.get $idx)
+         (ref.i31 (i32.add (i31.get_s (ref.cast (ref i31) (local.get $old)))
+                           (i31.get_s (ref.cast (ref i31) (local.get $i))))))
+      (ref.i31 (i32.const 0)))
+
+   (func (export "caml_atomic_sub_field")
+      (param $ref (ref eq)) (param $field (ref eq)) (param $i (ref eq)) (result (ref eq))
+      (local $b (ref $block))
+      (local $idx i32)
+      (local $old (ref eq))
+      (local.set $b (ref.cast (ref $block) (local.get $ref)))
+      (local.set $idx (i32.add (i31.get_s (ref.cast (ref i31) (local.get $field))) (i32.const 1)))
+      (local.set $old (array.get $block (local.get $b) (local.get $idx)))
+      (array.set $block (local.get $b) (local.get $idx)
+         (ref.i31 (i32.sub (i31.get_s (ref.cast (ref i31) (local.get $old)))
+                           (i31.get_s (ref.cast (ref i31) (local.get $i))))))
+      (ref.i31 (i32.const 0)))
+
+   (func (export "caml_atomic_land_field")
+      (param $ref (ref eq)) (param $field (ref eq)) (param $i (ref eq)) (result (ref eq))
+      (local $b (ref $block))
+      (local $idx i32)
+      (local $old (ref eq))
+      (local.set $b (ref.cast (ref $block) (local.get $ref)))
+      (local.set $idx (i32.add (i31.get_s (ref.cast (ref i31) (local.get $field))) (i32.const 1)))
+      (local.set $old (array.get $block (local.get $b) (local.get $idx)))
+      (array.set $block (local.get $b) (local.get $idx)
+         (ref.i31 (i32.and (i31.get_s (ref.cast (ref i31) (local.get $old)))
+                           (i31.get_s (ref.cast (ref i31) (local.get $i))))))
+      (ref.i31 (i32.const 0)))
+
+   (func (export "caml_atomic_lor_field")
+      (param $ref (ref eq)) (param $field (ref eq)) (param $i (ref eq)) (result (ref eq))
+      (local $b (ref $block))
+      (local $idx i32)
+      (local $old (ref eq))
+      (local.set $b (ref.cast (ref $block) (local.get $ref)))
+      (local.set $idx (i32.add (i31.get_s (ref.cast (ref i31) (local.get $field))) (i32.const 1)))
+      (local.set $old (array.get $block (local.get $b) (local.get $idx)))
+      (array.set $block (local.get $b) (local.get $idx)
+         (ref.i31 (i32.or (i31.get_s (ref.cast (ref i31) (local.get $old)))
+                          (i31.get_s (ref.cast (ref i31) (local.get $i))))))
+      (ref.i31 (i32.const 0)))
+
+   (func (export "caml_atomic_lxor_field")
+      (param $ref (ref eq)) (param $field (ref eq)) (param $i (ref eq)) (result (ref eq))
+      (local $b (ref $block))
+      (local $idx i32)
+      (local $old (ref eq))
+      (local.set $b (ref.cast (ref $block) (local.get $ref)))
+      (local.set $idx (i32.add (i31.get_s (ref.cast (ref i31) (local.get $field))) (i32.const 1)))
+      (local.set $old (array.get $block (local.get $b) (local.get $idx)))
+      (array.set $block (local.get $b) (local.get $idx)
+         (ref.i31 (i32.xor (i31.get_s (ref.cast (ref i31) (local.get $old)))
+                           (i31.get_s (ref.cast (ref i31) (local.get $i))))))
+      (ref.i31 (i32.const 0)))
+
+   (func (export "caml_atomic_cas_field")
+      (param $ref (ref eq)) (param $field (ref eq)) (param $o (ref eq)) (param $n (ref eq)) (result (ref eq))
+      (local $b (ref $block))
+      (local $idx i32)
+      (local $old (ref eq))
+      (local.set $b (ref.cast (ref $block) (local.get $ref)))
+      (local.set $idx (i32.add (i31.get_s (ref.cast (ref i31) (local.get $field))) (i32.const 1)))
+      (local.set $old (array.get $block (local.get $b) (local.get $idx)))
+      (if (ref.eq (local.get $old) (local.get $o))
+         (then
+            (array.set $block (local.get $b) (local.get $idx) (local.get $n))
+            (return (ref.i31 (i32.const 1)))))
+      (ref.i31 (i32.const 0)))
+
+   (func (export "caml_atomic_exchange_field")
+      (param $ref (ref eq)) (param $field (ref eq)) (param $v (ref eq)) (result (ref eq))
+      (local $b (ref $block))
+      (local $idx i32)
+      (local $old (ref eq))
+      (local.set $b (ref.cast (ref $block) (local.get $ref)))
+      (local.set $idx (i32.add (i31.get_s (ref.cast (ref i31) (local.get $field))) (i32.const 1)))
+      (local.set $old (array.get $block (local.get $b) (local.get $idx)))
+      (array.set $block (local.get $b) (local.get $idx) (local.get $v))
+      (local.get $old))
+
+   (func (export "caml_atomic_set_field")
+      (param $ref (ref eq)) (param $field (ref eq)) (param $v (ref eq)) (result (ref eq))
+      (local $b (ref $block))
+      (local $idx i32)
+      (local.set $b (ref.cast (ref $block) (local.get $ref)))
+      (local.set $idx (i32.add (i31.get_s (ref.cast (ref i31) (local.get $field))) (i32.const 1)))
+      (array.set $block (local.get $b) (local.get $idx) (local.get $v))
+      (ref.i31 (i32.const 0)))
 )

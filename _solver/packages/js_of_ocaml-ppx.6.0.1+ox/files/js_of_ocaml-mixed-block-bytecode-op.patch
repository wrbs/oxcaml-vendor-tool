--- a/compiler/lib/instr.ml
+++ b/compiler/lib/instr.ml
@@ -173,6 +173,7 @@
   | RESUME
   | RESUMETERM
   | REPERFORMTERM
+  | MAKE_FAUX_MIXEDBLOCK
   | FIRST_UNIMPLEMENTED_OP
 
 let equal (a : t) b = Poly.equal a b
@@ -360,6 +361,7 @@
      ; RESUME, if_v500 KNullaryCall, "RESUME"
      ; RESUMETERM, if_v500 (KStop 1), "RESUMETERM"
      ; REPERFORMTERM, if_v500 (KStop 1), "REPERFORMTERM"
+     ; MAKE_FAUX_MIXEDBLOCK, KBinary, "MAKE_FAUX_MIXEDBLOCK"
      ; FIRST_UNIMPLEMENTED_OP, K_will_not_happen, "FIRST_UNIMPLEMENTED_OP"
     |]
   in
--- a/compiler/lib/instr.mli
+++ b/compiler/lib/instr.mli
@@ -172,6 +172,7 @@
   | RESUME
   | RESUMETERM
   | REPERFORMTERM
+  | MAKE_FAUX_MIXEDBLOCK
   | FIRST_UNIMPLEMENTED_OP
 
 type kind =
--- a/compiler/lib/ocaml_compiler.ml
+++ b/compiler/lib/ocaml_compiler.ml
@@ -32,7 +32,7 @@
   | Const_float_array sl | Const_float_block sl ->
       let l = List.map ~f:(fun f -> Int64.bits_of_float (float_of_string f)) sl in
       Float_array (Array.of_list l)
-  | Const_block (tag, l) ->
+  | Const_mixed_block (tag, _, l) | Const_block (tag, l) ->
       let l = Array.of_list (List.map l ~f:constant_of_const) in
       Tuple (tag, l, Unknown)
 
--- a/compiler/lib/parse_bytecode.ml
+++ b/compiler/lib/parse_bytecode.ml
@@ -1412,7 +1412,7 @@
           (pc + 2)
           state
           (Let (x, Block (i, [||], Unknown, Maybe_mutable)) :: instrs)
-    | MAKEBLOCK ->
+    | MAKE_FAUX_MIXEDBLOCK | MAKEBLOCK ->
         let size = getu code (pc + 1) in
         let tag = getu code (pc + 2) in
         let state = State.push state in

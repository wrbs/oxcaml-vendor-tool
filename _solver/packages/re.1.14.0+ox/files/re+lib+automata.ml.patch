--- a/lib/automata.ml
+++ b/lib/automata.ml
@@ -24,9 +24,9 @@ open Import
 
 let hash_combine h accu = (accu * 65599) + h
 
-module Ids : sig
+module Ids : sig @@ portable
   module Id : sig
-    type t
+    type t : immediate
 
     val equal : t -> t -> bool
     val zero : t
@@ -35,7 +35,7 @@ module Ids : sig
 
     module Hash_set : sig
       type id := t
-      type t
+      type t : mutable_data
 
       val create : unit -> t
       val mem : t -> id -> bool
@@ -105,7 +105,7 @@ module Rep_kind = struct
   let pp fmt t = Format.pp_print_string fmt (to_string t)
 end
 
-module Mark : sig
+module Mark : sig @@ portable
   type t = private int
 
   val compare : t -> t -> int
@@ -136,7 +136,7 @@ end = struct
   ;;
 end
 
-module Idx : sig
+module Idx : sig @@ portable
   type t = private int
 
   val pp : t Fmt.t
@@ -292,10 +292,12 @@ type expr = Expr.t
 include Expr
 
 module Marks = struct
-  type t =
+  type t : immutable_data =
     { marks : (Mark.t * Idx.t) list
     ; pmarks : Pmark.Set.t
     }
+  [@@unsafe_allow_any_mode_crossing
+    ]
 
   let to_dyn { marks; pmarks } : Dyn.t =
     let open Dyn in
@@ -376,8 +378,8 @@ module Status = struct
     | Running
 end
 
-module Desc : sig
-  type t
+module Desc : sig @@ portable
+  type t : immutable_data
 
   val pp : t Fmt.t
 
@@ -458,7 +460,7 @@ end = struct
     | TMatch m -> variant "TMarks" [ Marks.to_dyn m ]
   ;;
 
-  let to_dyn = to_dyn None
+  let to_dyn t = to_dyn None t
 
   open E
 
@@ -517,10 +519,11 @@ end = struct
     | _ :: r -> first_match r
   ;;
 
-  let remove_matches =
+  let remove_matches t =
     List.filter ~f:(function
       | TMatch _ -> false
       | _ -> true)
+      t
   ;;
 
   let split_at_match =
@@ -590,13 +593,14 @@ end
 module E = Desc.E
 
 module State = struct
-  type t =
+  type t : immutable_data =
     { idx : Idx.t
     ; category : Category.t
     ; desc : Desc.t
     ; mutable status : Status.t option
     ; hash : int
     }
+  [@@unsafe_allow_any_mode_crossing]
   (* Thread-safety: We use double-checked locking to access field
      [status] in function [status] below. *)
 
@@ -651,7 +655,7 @@ module State = struct
       st
   ;;
 
-  module Table = Hashtbl.Make (struct
+  module Table = Hashtbl.MakePortable (struct
       type nonrec t = t
 
       let equal = equal

--- a/lib/automata.mli
+++ b/lib/automata.mli
@@ -20,6 +20,8 @@
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *)
 
+open Import
+
 (* Regular expressions *)
 
 module Mark : sig
--- a/lib/import.ml
+++ b/lib/import.ml
@@ -22,3 +22,33 @@ module Int = struct
 
   include Stdlib.Int
 end
+
+external runtime5 : unit -> bool @@ portable = "%runtime5"
+
+module type Mutex = sig @@ portable
+  type t : value mod portable contended
+  val create : unit -> t
+  val lock : t -> unit
+  val try_lock : t -> bool
+  val unlock : t -> unit
+  val protect : t -> (unit -> 'a) -> 'a
+end
+
+module Mutex : Mutex = struct
+  include (
+    val (
+      if runtime5 ()
+      then (module Mutex : Mutex)
+      else (module struct
+        (* Define a fake version of Mutex for runtime4; we're not synchronizing access for
+           the sake of systhreads, only multiple domains, and Mutex raises on runtime4
+           unless you include the threads library (which we can't do since we need to work
+           on JSOO) *)
+        type t = unit
+        let create () = ()
+        let lock () = ()
+        let try_lock () = true
+        let unlock () = ()
+        let protect () f = f ()
+      end : Mutex)))
+end

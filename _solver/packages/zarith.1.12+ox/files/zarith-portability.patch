--- a/q.mli
+++ b/q.mli
@@ -1,3 +1,4 @@
+@@portable
 (**
    Rationals.
 
@@ -21,7 +22,7 @@
 
 (** {1 Types} *)
 
-type t = {
+type t : immutable_data = {
     global_ num: Z.t; (** Numerator. *)
     global_ den: Z.t; (** Denominator, >= 0 *)
   }
--- a/z.ml
+++ b/z.ml
@@ -16,53 +16,53 @@
 
  *)
 
-type t
+type t : immutable_data
 
 exception Overflow
 
-external init: unit -> unit = "ml_z_init"
+external init: unit -> unit @@ portable = "ml_z_init"
 let _ = init ()
 
-let _ = Callback.register_exception "ml_z_overflow" Overflow
+let _ = Callback.Safe.register_exception "ml_z_overflow" Overflow
 
-external is_small_int: t -> bool = "%obj_is_int"
-external unsafe_to_int: t -> int = "%identity"
-external of_int: int -> t = "%identity"
+external is_small_int: t -> bool @@ portable = "%obj_is_int"
+external unsafe_to_int: t -> int @@ portable = "%identity"
+external of_int: int -> t @@ portable = "%identity"
 
-external c_neg: t -> t = "ml_z_neg"
+external c_neg: t -> t @@ portable = "ml_z_neg"
 
 let neg x =
   if is_small_int x && unsafe_to_int x <> min_int
   then of_int (- unsafe_to_int x)
   else c_neg x
 
-external c_add: t -> t -> t = "ml_z_add"
+external c_add: t -> t -> t @@ portable = "ml_z_add"
 
 let add x y =
   if is_small_int x && is_small_int y then begin
     let z = unsafe_to_int x + unsafe_to_int y in
     (* Overflow check -- Hacker's Delight, section 2.12 *)
-    if (z lxor unsafe_to_int x) land (z lxor unsafe_to_int y) >= 0 
+    if (z lxor unsafe_to_int x) land (z lxor unsafe_to_int y) >= 0
     then of_int z
     else c_add x y
   end else
     c_add x y
 
-external c_sub: t -> t -> t = "ml_z_sub"
+external c_sub: t -> t -> t @@ portable = "ml_z_sub"
 
 let sub x y =
   if is_small_int x && is_small_int y then begin
     let z = unsafe_to_int x - unsafe_to_int y in
     (* Overflow check -- Hacker's Delight, section 2.12 *)
     if (unsafe_to_int x lxor unsafe_to_int y)
-       land (z lxor unsafe_to_int x) >= 0 
+       land (z lxor unsafe_to_int x) >= 0
     then of_int z
     else c_sub x y
   end else
     c_sub x y
 
-external mul_overflows: int -> int -> bool = "ml_z_mul_overflows" [@@noalloc]
-external c_mul: t -> t -> t = "ml_z_mul"
+external mul_overflows: int -> int -> bool @@ portable = "ml_z_mul_overflows" [@@noalloc]
+external c_mul: t -> t -> t @@ portable = "ml_z_mul"
 
 let mul x y =
   if is_small_int x && is_small_int y
@@ -70,7 +70,7 @@ let mul x y =
   then of_int (unsafe_to_int x * unsafe_to_int y)
   else c_mul x y
 
-external c_div: t -> t -> t = "ml_z_div"
+external c_div: t -> t -> t @@ portable = "ml_z_div"
 
 let div x y =
   if is_small_int y then
@@ -83,10 +83,10 @@ let div x y =
   else
     c_div x y
 
-external cdiv: t -> t -> t = "ml_z_cdiv"
-external fdiv: t -> t -> t = "ml_z_fdiv"
+external cdiv: t -> t -> t @@ portable = "ml_z_cdiv"
+external fdiv: t -> t -> t @@ portable = "ml_z_fdiv"
 
-external c_rem: t -> t -> t = "ml_z_rem"
+external c_rem: t -> t -> t @@ portable = "ml_z_rem"
 
 let rem x y =
   if is_small_int y then
@@ -99,9 +99,9 @@ let rem x y =
   else
     c_rem x y
 
-external div_rem: t -> t -> (t * t) = "ml_z_div_rem"
+external div_rem: t -> t -> (t * t) @@ portable = "ml_z_div_rem"
 
-external c_divexact: t -> t -> t = "ml_z_divexact"
+external c_divexact: t -> t -> t @@ portable = "ml_z_divexact"
 
 let divexact x y =
   if is_small_int y then
@@ -114,21 +114,21 @@ let divexact x y =
   else
     c_divexact x y
 
-external c_succ: t -> t = "ml_z_succ"
+external c_succ: t -> t @@ portable = "ml_z_succ"
 
 let succ x =
   if is_small_int x && unsafe_to_int x <> max_int
   then of_int (unsafe_to_int x + 1)
   else c_succ x
 
-external c_pred: t -> t = "ml_z_pred"
+external c_pred: t -> t @@ portable = "ml_z_pred"
 
 let pred x =
   if is_small_int x && unsafe_to_int x <> min_int
   then of_int (unsafe_to_int x - 1)
   else c_pred x
 
-external c_abs: t -> t = "ml_z_abs"
+external c_abs: t -> t @@ portable = "ml_z_abs"
 
 let abs x =
   if is_small_int x then
@@ -140,35 +140,35 @@ let abs x =
   else
     c_abs x
 
-external c_logand: t -> t -> t = "ml_z_logand"
+external c_logand: t -> t -> t @@ portable = "ml_z_logand"
 
 let logand x y =
   if is_small_int x && is_small_int y
   then of_int (unsafe_to_int x land unsafe_to_int y)
   else c_logand x y
 
-external c_logor: t -> t -> t = "ml_z_logor"
+external c_logor: t -> t -> t @@ portable = "ml_z_logor"
 
 let logor x y =
   if is_small_int x && is_small_int y
   then of_int (unsafe_to_int x lor unsafe_to_int y)
   else c_logor x y
 
-external c_logxor: t -> t -> t = "ml_z_logxor"
+external c_logxor: t -> t -> t @@ portable = "ml_z_logxor"
 
 let logxor x y =
   if is_small_int x && is_small_int y
   then of_int (unsafe_to_int x lxor unsafe_to_int y)
   else c_logxor x y
 
-external c_lognot: t -> t = "ml_z_lognot"
+external c_lognot: t -> t @@ portable = "ml_z_lognot"
 
 let lognot x =
   if is_small_int x
   then of_int (unsafe_to_int x lxor (-1))
   else c_lognot x
 
-external c_shift_left: t -> int -> t = "ml_z_shift_left"
+external c_shift_left: t -> int -> t @@ portable = "ml_z_shift_left"
 
 let shift_left x y =
   if is_small_int x && y >= 0 && y < Sys.word_size then begin
@@ -179,7 +179,7 @@ let shift_left x y =
   end else
     c_shift_left x y
 
-external c_shift_right: t -> int -> t = "ml_z_shift_right"
+external c_shift_right: t -> int -> t @@ portable = "ml_z_shift_right"
 
 let shift_right x y =
   if is_small_int x && y >= 0 then
@@ -188,7 +188,7 @@ let shift_right x y =
   else
     c_shift_right x y
 
-external c_shift_right_trunc: t -> int -> t = "ml_z_shift_right_trunc"
+external c_shift_right_trunc: t -> int -> t @@ portable = "ml_z_shift_right_trunc"
 
 let shift_right_trunc x y =
   if is_small_int x && y >= 0 then
@@ -201,64 +201,64 @@ let shift_right_trunc x y =
   else
     c_shift_right_trunc x y
 
-external of_int32: local_ int32 -> t = "ml_z_of_int32"
-external of_int64: local_ int64 -> t = "ml_z_of_int64"
-external of_nativeint: local_ nativeint -> t = "ml_z_of_nativeint"
-external of_float: local_ float -> t = "ml_z_of_float"
+external of_int32: local_ int32 -> t @@ portable = "ml_z_of_int32"
+external of_int64: local_ int64 -> t @@ portable = "ml_z_of_int64"
+external of_nativeint: local_ nativeint -> t @@ portable = "ml_z_of_nativeint"
+external of_float: local_ float -> t @@ portable = "ml_z_of_float"
 
-external c_to_int: t -> int = "ml_z_to_int"
+external c_to_int: t -> int @@ portable = "ml_z_to_int"
 
 let to_int x =
   if is_small_int x then unsafe_to_int x else c_to_int x
 
-external to_int32: t -> int32 = "ml_z_to_int32"
-external to_int64: t -> int64 = "ml_z_to_int64"
-external to_nativeint: t -> nativeint = "ml_z_to_nativeint"
-external format: string -> t -> string = "ml_z_format"
-external of_substring_base: int -> local_ string -> pos:int -> len:int -> t = "ml_z_of_substring_base"
-external compare: t -> t -> int = "ml_z_compare" [@@noalloc]
-external equal: t -> t -> bool = "ml_z_equal" [@@noalloc]
-external sign: t -> int = "ml_z_sign" [@@noalloc]
-external gcd: t -> t -> t = "ml_z_gcd"
-external gcdext_intern: t -> t -> (t * t * bool) = "ml_z_gcdext_intern"
-external sqrt: t -> t = "ml_z_sqrt"
-external sqrt_rem: t -> (t * t) = "ml_z_sqrt_rem"
-external numbits: t -> int = "ml_z_numbits" [@@noalloc]
-external trailing_zeros: t -> int = "ml_z_trailing_zeros" [@@noalloc]
-external popcount: t -> int = "ml_z_popcount"
-external hamdist: t -> t -> int = "ml_z_hamdist"
-external size: t -> int = "ml_z_size" [@@noalloc]
-external fits_int: t -> bool = "ml_z_fits_int" [@@noalloc]
-external fits_int32: t -> bool = "ml_z_fits_int32" [@@noalloc]
-external fits_int64: t -> bool = "ml_z_fits_int64" [@@noalloc]
-external fits_nativeint: t -> bool = "ml_z_fits_nativeint" [@@noalloc]
-external extract: t -> int -> int -> t = "ml_z_extract"
-external powm: t -> t -> t -> t = "ml_z_powm"
-external pow: t -> int -> t = "ml_z_pow"
-external powm_sec: t -> t -> t -> t = "ml_z_powm_sec"
-external root: t -> int -> t = "ml_z_root"
-external rootrem: t -> int -> t * t = "ml_z_rootrem"
-external invert: t -> t -> t = "ml_z_invert"
-external perfect_power: t -> bool = "ml_z_perfect_power"
-external perfect_square: t -> bool = "ml_z_perfect_square"
-external probab_prime: t -> int -> int = "ml_z_probab_prime"
-external nextprime: t -> t = "ml_z_nextprime"
-external hash: t -> int = "ml_z_hash" [@@noalloc]
-external to_bits: t -> string = "ml_z_to_bits"
-external of_bits: string -> t = "ml_z_of_bits"
-external divisible: t -> t -> bool = "ml_z_divisible"
-external congruent: t -> t -> t -> bool = "ml_z_congruent"
-external jacobi: t -> t -> int = "ml_z_jacobi"
-external legendre: t -> t -> int = "ml_z_legendre"
-external kronecker: t -> t -> int = "ml_z_kronecker"
-external remove: t -> t -> t * int = "ml_z_remove"
-external fac: int -> t = "ml_z_fac"
-external fac2: int -> t = "ml_z_fac2"
-external facM: int -> int -> t = "ml_z_facM"
-external primorial: int -> t = "ml_z_primorial"
-external bin: t -> int -> t = "ml_z_bin"
-external fib: int -> t = "ml_z_fib"
-external lucnum: int -> t = "ml_z_lucnum"
+external to_int32: t -> int32 @@ portable = "ml_z_to_int32"
+external to_int64: t -> int64 @@ portable = "ml_z_to_int64"
+external to_nativeint: t -> nativeint @@ portable = "ml_z_to_nativeint"
+external format: string -> t -> string @@ portable = "ml_z_format"
+external of_substring_base: int -> local_ string -> pos:int -> len:int -> t @@ portable = "ml_z_of_substring_base"
+external compare: t -> t -> int @@ portable = "ml_z_compare" [@@noalloc]
+external equal: t -> t -> bool @@ portable = "ml_z_equal" [@@noalloc]
+external sign: t -> int @@ portable = "ml_z_sign" [@@noalloc]
+external gcd: t -> t -> t @@ portable = "ml_z_gcd"
+external gcdext_intern: t -> t -> (t * t * bool) @@ portable = "ml_z_gcdext_intern"
+external sqrt: t -> t @@ portable = "ml_z_sqrt"
+external sqrt_rem: t -> (t * t) @@ portable = "ml_z_sqrt_rem"
+external numbits: t -> int @@ portable = "ml_z_numbits" [@@noalloc]
+external trailing_zeros: t -> int @@ portable = "ml_z_trailing_zeros" [@@noalloc]
+external popcount: t -> int @@ portable = "ml_z_popcount"
+external hamdist: t -> t -> int @@ portable = "ml_z_hamdist"
+external size: t -> int @@ portable = "ml_z_size" [@@noalloc]
+external fits_int: t -> bool @@ portable = "ml_z_fits_int" [@@noalloc]
+external fits_int32: t -> bool @@ portable = "ml_z_fits_int32" [@@noalloc]
+external fits_int64: t -> bool @@ portable = "ml_z_fits_int64" [@@noalloc]
+external fits_nativeint: t -> bool @@ portable = "ml_z_fits_nativeint" [@@noalloc]
+external extract: t -> int -> int -> t @@ portable = "ml_z_extract"
+external powm: t -> t -> t -> t @@ portable = "ml_z_powm"
+external pow: t -> int -> t @@ portable = "ml_z_pow"
+external powm_sec: t -> t -> t -> t @@ portable = "ml_z_powm_sec"
+external root: t -> int -> t @@ portable = "ml_z_root"
+external rootrem: t -> int -> t * t @@ portable = "ml_z_rootrem"
+external invert: t -> t -> t @@ portable = "ml_z_invert"
+external perfect_power: t -> bool @@ portable = "ml_z_perfect_power"
+external perfect_square: t -> bool @@ portable = "ml_z_perfect_square"
+external probab_prime: t -> int -> int @@ portable = "ml_z_probab_prime"
+external nextprime: t -> t @@ portable = "ml_z_nextprime"
+external hash: t -> int @@ portable = "ml_z_hash" [@@noalloc]
+external to_bits: t -> string @@ portable = "ml_z_to_bits"
+external of_bits: string -> t @@ portable = "ml_z_of_bits"
+external divisible: t -> t -> bool @@ portable = "ml_z_divisible"
+external congruent: t -> t -> t -> bool @@ portable = "ml_z_congruent"
+external jacobi: t -> t -> int @@ portable = "ml_z_jacobi"
+external legendre: t -> t -> int @@ portable = "ml_z_legendre"
+external kronecker: t -> t -> int @@ portable = "ml_z_kronecker"
+external remove: t -> t -> t * int @@ portable = "ml_z_remove"
+external fac: int -> t @@ portable = "ml_z_fac"
+external fac2: int -> t @@ portable = "ml_z_fac2"
+external facM: int -> int -> t @@ portable = "ml_z_facM"
+external primorial: int -> t @@ portable = "ml_z_primorial"
+external bin: t -> int -> t @@ portable = "ml_z_bin"
+external fib: int -> t @@ portable = "ml_z_fib"
+external lucnum: int -> t @@ portable = "ml_z_lucnum"
 
 let zero = of_int 0
 let one = of_int 1
@@ -272,12 +272,12 @@ let geq a b = compare a b >= 0
 let lt a b = compare a b < 0
 let gt a b = compare a b > 0
 
-let to_string = format "%d"
+let to_string n = format "%d" n
 
-external string_length : local_ string -> int = "%string_length"
+external string_length : local_ string -> int @@ portable = "%string_length"
 
 let of_string s = of_substring_base 0 s ~pos:0 ~len:(string_length s)
-let of_substring = of_substring_base 0
+let of_substring s ~pos ~len = of_substring_base 0 s ~pos ~len
 let of_string_base base s = of_substring_base base s ~pos:0 ~len:(string_length s)
 
 let ediv_rem a b =
@@ -316,7 +316,7 @@ let lcm u v =
     let g = gcd u v in
     abs (mul (divexact u g) v)
 
-external testbit_internal: t -> int -> bool = "ml_z_testbit" [@@noalloc]
+external testbit_internal: t -> int -> bool @@ portable = "ml_z_testbit" [@@noalloc]
 let testbit x n =
   if n >= 0 then testbit_internal x n else invalid_arg "Z.testbit"
 (* The test [n >= 0] is done in Caml rather than in the C stub code
@@ -387,8 +387,8 @@ let (+) = add
 let (-) = sub
 let ( * ) = mul
 let (/) = div
-external (/>): t -> t -> t = "ml_z_cdiv"
-external (/<): t -> t -> t = "ml_z_fdiv"
+external (/>): t -> t -> t @@ portable = "ml_z_cdiv"
+external (/<): t -> t -> t @@ portable = "ml_z_fdiv"
 let (/|) = divexact
 let (mod) = rem
 let (land) = logand
@@ -397,8 +397,8 @@ let (lxor) = logxor
 let (~!) = lognot
 let (lsl) = shift_left
 let (asr) = shift_right
-external (~$): int -> t = "%identity"
-external ( ** ): t -> int -> t = "ml_z_pow"
+external (~$): int -> t @@ portable = "%identity"
+external ( ** ): t -> int -> t @@ portable = "ml_z_pow"
 
 module Compare = struct
   let (=) = equal
--- a/z.mli
+++ b/z.mli
@@ -1,3 +1,5 @@
+@@ portable
+
 (**
    Integers.
 
@@ -46,7 +48,7 @@
 
 (** {1 Types} *)
 
-type t
+type t : immutable_data
 (** Type of integers of arbitrary length. *)
 
 exception Overflow
@@ -194,13 +196,13 @@ val divexact: t -> t -> t
 
 external divisible: t -> t -> bool = "ml_z_divisible"
 (** [divisible a b] returns [true] if [a] is exactly divisible by [b].
-    Unlike the other division functions, [b = 0] is accepted 
+    Unlike the other division functions, [b = 0] is accepted
     (only 0 is considered divisible by 0).
 *)
 
 external congruent: t -> t -> t -> bool = "ml_z_congruent"
 (** [congruent a b c] returns [true] if [a] is congruent to [b] modulo [c].
-    Unlike the other division functions, [c = 0] is accepted 
+    Unlike the other division functions, [c = 0] is accepted
     (only equal numbers are considered equal congruent 0).
 *)
 
@@ -216,27 +218,27 @@ external congruent: t -> t -> t -> bool 
 
 val logand: t -> t -> t
 (** Bitwise logical and. *)
-    
+
 val logor: t -> t -> t
 (** Bitwise logical or. *)
-    
+
 val logxor: t -> t -> t
 (** Bitwise logical exclusive or. *)
 
 val lognot: t -> t
-(** Bitwise logical negation. 
+(** Bitwise logical negation.
     The identity [lognot a]=[-a-1] always hold.
  *)
 
 val shift_left: t -> int -> t
-(** Shifts to the left. 
+(** Shifts to the left.
     Equivalent to a multiplication by a power of 2.
     The second argument must be nonnegative.
  *)
 
 val shift_right: t -> int -> t
-(** Shifts to the right. 
-    This is an arithmetic shift, 
+(** Shifts to the right.
+    This is an arithmetic shift,
     equivalent to a division by a power of 2 with rounding towards -oo.
     The second argument must be nonnegative.
  *)
@@ -374,7 +376,7 @@ val pp_print: Format.formatter -> t -> u
 
 (** {1 Ordering} *)
 
-external compare: t -> t -> int = "ml_z_compare" [@@noalloc]
+external compare: t -> t -> int @@ portable = "ml_z_compare" [@@noalloc]
 (** Comparison.  [compare x y] returns 0 if [x] equals [y],
     -1 if [x] is smaller than [y], and 1 if [x] is greater than [y].
 
@@ -490,7 +492,7 @@ external kronecker: t -> t -> int = "ml_
 
 external remove: t -> t -> t * int = "ml_z_remove"
 (** [remove a b] returns [a] after removing all the occurences of the
-    factor [b]. 
+    factor [b].
     Also returns how many occurrences were removed.
  *)
 
@@ -498,12 +500,12 @@ external fac: int -> t = "ml_z_fac"
 (** [fac n] returns the factorial of [n] ([n!]).
     Raises an [Invaid_argument] if [n] is non-positive.
 *)
-  
+
 external fac2: int -> t = "ml_z_fac2"
 (** [fac2 n] returns the double factorial of [n] ([n!!]).
     Raises an [Invaid_argument] if [n] is non-positive.
 *)
-  
+
  external facM: int -> int -> t = "ml_z_facM"
 (** [facM n m] returns the [m]-th factorial of [n].
     Raises an [Invaid_argument] if [n] or [m] is non-positive.

--- a/q.ml
+++ b/q.ml
@@ -17,8 +17,8 @@
  *)
 
 type t = {
-    num: Z.t; (** Numerator. *)
-    den: Z.t; (** Denominator, >= 0 *)
+    global_ num: Z.t; (** Numerator. *)
+    global_ den: Z.t; (** Denominator, >= 0 *)
   }
 (* Type of rationals.
    Invariants:
@@ -104,7 +104,7 @@ type kind =
   | UNDEF  (* 0/0 *)
   | NZERO  (* non-special, non-0 *)
 
-let classify n =
+let classify (local_ n) =
   if n.den == Z.zero then
     match Z.sign n.num with
     | 1  -> INF
@@ -127,10 +127,12 @@ let sign x = Z.sign x.num
    sign -inf = -1
 *)
 
-let equal x y =
+let equal__local (local_ x) (local_ y) =
   (Z.equal x.num y.num) && (Z.equal x.den y.den) && (classify x <> UNDEF)
 
-let compare x y =
+let equal x y = equal__local x y
+
+let compare__local (local_ x) (local_ y) =
   match classify x, classify y with
   | UNDEF,UNDEF | INF,INF | MINF,MINF -> 0
   | UNDEF,_ -> -1
@@ -147,6 +149,8 @@ let compare x y =
         (Z.mul x.num y.den)
         (Z.mul y.num x.den)
 
+let compare x y = compare__local x y
+
 let min a b = if compare a b <= 0 then a else b
 let max a b = if compare a b >= 0 then a else b
 
--- a/q.mli
+++ b/q.mli
@@ -22,8 +22,8 @@
 (** {1 Types} *)
 
 type t = {
-    num: Z.t; (** Numerator. *)
-    den: Z.t; (** Denominator, >= 0 *)
+    global_ num: Z.t; (** Numerator. *)
+    global_ den: Z.t; (** Denominator, >= 0 *)
   }
 (** A rational is represented as a pair numerator/denominator, reduced to
     have a non-negative denominator and no common factor.
@@ -99,7 +99,7 @@ type kind =
     whether the numerator and/or denominator is null.
  *)
 
-val classify: t -> kind
+val classify: local_ t -> kind
 (** Determines the kind of a rational. *)
 
 val is_real: t -> bool
@@ -110,6 +110,8 @@ val sign: t -> int
     negative (including -inf), and 0 if it is null or undefined.
  *)
 
+val compare__local : local_ t -> local_ t -> int
+
 val compare: t -> t -> int
 (** [compare x y] compares [x] to [y] and returns 1 if [x] is strictly
     greater that [y], -1 if it is strictly smaller, and 0 if they are
@@ -124,6 +126,8 @@ val compare: t -> t -> int
     the ordering of rationals.
  *)
 
+val equal__local : local_ t -> local_ t -> bool
+
 val equal: t -> t -> bool
 (** Equality testing.
     Unlike [compare], this follows IEEE semantics: [undef] <> [undef].
--- a/z.ml
+++ b/z.ml
@@ -201,10 +201,10 @@ let shift_right_trunc x y =
   else
     c_shift_right_trunc x y
 
-external of_int32: int32 -> t = "ml_z_of_int32"
-external of_int64: int64 -> t = "ml_z_of_int64"
-external of_nativeint: nativeint -> t = "ml_z_of_nativeint"
-external of_float: float -> t = "ml_z_of_float"
+external of_int32: local_ int32 -> t = "ml_z_of_int32"
+external of_int64: local_ int64 -> t = "ml_z_of_int64"
+external of_nativeint: local_ nativeint -> t = "ml_z_of_nativeint"
+external of_float: local_ float -> t = "ml_z_of_float"
 
 external c_to_int: t -> int = "ml_z_to_int"
 
@@ -215,7 +215,7 @@ external to_int32: t -> int32 = "ml_z_to
 external to_int64: t -> int64 = "ml_z_to_int64"
 external to_nativeint: t -> nativeint = "ml_z_to_nativeint"
 external format: string -> t -> string = "ml_z_format"
-external of_substring_base: int -> string -> pos:int -> len:int -> t = "ml_z_of_substring_base"
+external of_substring_base: int -> local_ string -> pos:int -> len:int -> t = "ml_z_of_substring_base"
 external compare: t -> t -> int = "ml_z_compare" [@@noalloc]
 external equal: t -> t -> bool = "ml_z_equal" [@@noalloc]
 external sign: t -> int = "ml_z_sign" [@@noalloc]
@@ -274,9 +274,11 @@ let gt a b = compare a b > 0
 
 let to_string = format "%d"
 
-let of_string s = of_substring_base 0 s ~pos:0 ~len:(String.length s)
+external string_length : local_ string -> int = "%string_length"
+
+let of_string s = of_substring_base 0 s ~pos:0 ~len:(string_length s)
 let of_substring = of_substring_base 0
-let of_string_base base s = of_substring_base base s ~pos:0 ~len:(String.length s)
+let of_string_base base s = of_substring_base base s ~pos:0 ~len:(string_length s)
 
 let ediv_rem a b =
   (* we have a = q * b + r, but [Big_int]'s remainder satisfies 0 <= r < |b|,
--- a/z.mli
+++ b/z.mli
@@ -68,22 +68,22 @@ val minus_one: t
 external of_int: int -> t = "%identity"
 (** Converts from a base integer. *)
 
-external of_int32: int32 -> t = "ml_z_of_int32"
+external of_int32: local_ int32 -> t = "ml_z_of_int32"
 (** Converts from a 32-bit integer. *)
 
-external of_int64: int64 -> t = "ml_z_of_int64"
+external of_int64: local_ int64 -> t = "ml_z_of_int64"
 (** Converts from a 64-bit integer. *)
 
-external of_nativeint: nativeint -> t = "ml_z_of_nativeint"
+external of_nativeint: local_ nativeint -> t = "ml_z_of_nativeint"
 (** Converts from a native integer. *)
 
-external of_float: float -> t = "ml_z_of_float"
+external of_float: local_ float -> t = "ml_z_of_float"
 (** Converts from a floating-point value.
     The value is truncated (rounded towards zero).
     Raises [Overflow] on infinity and NaN arguments.
  *)
 
-val of_string: string -> t
+val of_string: local_ string -> t
 (** Converts a string to an integer.
     An optional [-] prefix indicates a negative number, while a [+]
     prefix is ignored.
@@ -96,19 +96,19 @@ val of_string: string -> t
     syntactically correct representation of an integer.
  *)
 
-val of_substring : string -> pos:int -> len:int -> t
+val of_substring : local_ string -> pos:int -> len:int -> t
 (** [of_substring s ~pos ~len] is the same as [of_string (String.sub s
     pos len)]
  *)
 
-val of_string_base: int -> string -> t
+val of_string_base: int -> local_ string -> t
 (** Parses a number represented as a string in the specified base,
     with optional [-] or [+] prefix.
     The base must be between 2 and 16.
  *)
 
 external of_substring_base
-  : int -> string -> pos:int -> len:int -> t
+  : int -> local_ string -> pos:int -> len:int -> t
   = "ml_z_of_substring_base"
 (** [of_substring_base base s ~pos ~len] is the same as [of_string_base
     base (String.sub s pos len)]

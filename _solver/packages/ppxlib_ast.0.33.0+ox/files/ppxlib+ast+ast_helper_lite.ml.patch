--- a/ast/ast_helper_lite.ml
+++ b/ast/ast_helper_lite.ml
@@ -79,16 +79,25 @@ module Typ = struct
     }
 
   let attr d a = { d with ptyp_attributes = d.ptyp_attributes @ [ a ] }
-  let any ?loc ?attrs () = mk ?loc ?attrs Ptyp_any
-  let var ?loc ?attrs a = mk ?loc ?attrs (Ptyp_var a)
-  let arrow ?loc ?attrs a b c = mk ?loc ?attrs (Ptyp_arrow (a, b, c))
-  let tuple ?loc ?attrs a = mk ?loc ?attrs (Ptyp_tuple a)
+  let any ?loc ?attrs () = mk ?loc ?attrs (Ptyp_any None)
+  let var ?loc ?attrs a = mk ?loc ?attrs (Ptyp_var (a, None))
+  let arrow ?loc ?attrs a b c = mk ?loc ?attrs (Ptyp_arrow (a, b, c, [], []))
+  let tuple ?loc ?attrs a = mk ?loc ?attrs (Ptyp_tuple (List.map (fun t -> None, t) a))
   let constr ?loc ?attrs a b = mk ?loc ?attrs (Ptyp_constr (a, b))
   let object_ ?loc ?attrs a b = mk ?loc ?attrs (Ptyp_object (a, b))
   let class_ ?loc ?attrs a b = mk ?loc ?attrs (Ptyp_class (a, b))
-  let alias ?loc ?attrs a b = mk ?loc ?attrs (Ptyp_alias (a, b))
+  let alias ?loc ?attrs a b =
+    let alias_loc =
+      match loc with
+      | None -> !default_loc
+      | Some alias_loc -> alias_loc
+    in
+    mk ?loc ?attrs
+      (Ptyp_alias (a, Some { txt = b; loc = { alias_loc with loc_ghost = true } }, None))
   let variant ?loc ?attrs a b c = mk ?loc ?attrs (Ptyp_variant (a, b, c))
-  let poly ?loc ?attrs a b = mk ?loc ?attrs (Ptyp_poly (a, b))
+  let poly ?loc ?attrs a b =
+    let a = List.map (fun a -> a, None) a in
+    mk ?loc ?attrs (Ptyp_poly (a, b))
   let package ?loc ?attrs a b = mk ?loc ?attrs (Ptyp_package (a, b))
   let extension ?loc ?attrs a = mk ?loc ?attrs (Ptyp_extension a)
 
@@ -101,39 +110,48 @@ module Typ = struct
       if List.mem v vl then
         Location.raise_errorf ~loc "variable in scope syntax error: %s" v
     in
+    let check_variable_opt vl v =
+      match v with
+      | None -> ()
+      | Some v -> check_variable vl v.loc v.txt
+    in
     let var_names = List.map (fun v -> v.txt) var_names in
     let rec loop t =
       let desc =
         match t.ptyp_desc with
-        | Ptyp_any -> Ptyp_any
-        | Ptyp_var x ->
+        | Ptyp_any jkind -> Ptyp_any jkind
+        | Ptyp_var (x, jkind) ->
             check_variable var_names t.ptyp_loc x;
-            Ptyp_var x
-        | Ptyp_arrow (label, core_type, core_type') ->
-            Ptyp_arrow (label, loop core_type, loop core_type')
-        | Ptyp_tuple lst -> Ptyp_tuple (List.map loop lst)
+            Ptyp_var (x, jkind)
+        | Ptyp_arrow (label, core_type, core_type', m1, m2) ->
+            Ptyp_arrow (label, loop core_type, loop core_type', m1, m2)
+        | Ptyp_tuple lst -> Ptyp_tuple (List.map (fun (l, t) -> l, loop t) lst)
+        | Ptyp_unboxed_tuple lst ->
+            Ptyp_unboxed_tuple (List.map (fun (l, t) -> l, loop t) lst)
         | Ptyp_constr ({ txt = Longident.Lident s }, [])
           when List.mem s var_names ->
-            Ptyp_var s
+            Ptyp_var (s, None)
         | Ptyp_constr (longident, lst) ->
             Ptyp_constr (longident, List.map loop lst)
         | Ptyp_object (lst, o) -> Ptyp_object (List.map loop_object_field lst, o)
         | Ptyp_class (longident, lst) ->
             Ptyp_class (longident, List.map loop lst)
-        | Ptyp_alias (core_type, string) ->
-            check_variable var_names t.ptyp_loc string;
-            Ptyp_alias (loop core_type, string)
+        | Ptyp_alias (core_type, string, jkind) ->
+            check_variable_opt var_names string;
+            Ptyp_alias (loop core_type, string, jkind)
         | Ptyp_variant (row_field_list, flag, lbl_lst_option) ->
             Ptyp_variant
               (List.map loop_row_field row_field_list, flag, lbl_lst_option)
         | Ptyp_poly (string_lst, core_type) ->
             List.iter
-              (fun v -> check_variable var_names t.ptyp_loc v.txt)
+              (fun (v, _) ->
+                 check_variable var_names t.ptyp_loc v.txt)
               string_lst;
             Ptyp_poly (string_lst, loop core_type)
         | Ptyp_package (longident, lst) ->
             Ptyp_package
               (longident, List.map (fun (n, typ) -> (n, loop typ)) lst)
+        | Ptyp_of_kind jkind -> Ptyp_of_kind jkind
         | Ptyp_extension (s, arg) -> Ptyp_extension (s, arg)
       in
       { t with ptyp_desc = desc }
@@ -170,16 +188,17 @@ module Pat = struct
   let alias ?loc ?attrs a b = mk ?loc ?attrs (Ppat_alias (a, b))
   let constant ?loc ?attrs a = mk ?loc ?attrs (Ppat_constant a)
   let interval ?loc ?attrs a b = mk ?loc ?attrs (Ppat_interval (a, b))
-  let tuple ?loc ?attrs a = mk ?loc ?attrs (Ppat_tuple a)
+  let tuple ?loc ?attrs a = mk ?loc ?attrs (Ppat_tuple (List.map (fun p -> None, p) a, Closed))
 
   let construct ?loc ?attrs a b =
     mk ?loc ?attrs (Ppat_construct (a, Option.map (fun b -> ([], b)) b))
 
   let variant ?loc ?attrs a b = mk ?loc ?attrs (Ppat_variant (a, b))
   let record ?loc ?attrs a b = mk ?loc ?attrs (Ppat_record (a, b))
-  let array ?loc ?attrs a = mk ?loc ?attrs (Ppat_array a)
+  let record_unboxed_product ?loc ?attrs a b = mk ?loc ?attrs (Ppat_record_unboxed_product (a, b))
+  let array ?loc ?attrs a = mk ?loc ?attrs (Ppat_array (Mutable, a))
   let or_ ?loc ?attrs a b = mk ?loc ?attrs (Ppat_or (a, b))
-  let constraint_ ?loc ?attrs a b = mk ?loc ?attrs (Ppat_constraint (a, b))
+  let constraint_ ?loc ?attrs a b = mk ?loc ?attrs (Ppat_constraint (a, Some b, []))
   let type_ ?loc ?attrs a = mk ?loc ?attrs (Ppat_type a)
   let lazy_ ?loc ?attrs a = mk ?loc ?attrs (Ppat_lazy a)
   let unpack ?loc ?attrs a = mk ?loc ?attrs (Ppat_unpack a)
@@ -200,28 +219,39 @@ module Exp = struct
   let attr d a = { d with pexp_attributes = d.pexp_attributes @ [ a ] }
   let ident ?loc ?attrs a = mk ?loc ?attrs (Pexp_ident a)
   let constant ?loc ?attrs a = mk ?loc ?attrs (Pexp_constant a)
-  let let_ ?loc ?attrs a b c = mk ?loc ?attrs (Pexp_let (a, b, c))
-  let fun_ ?loc ?attrs a b c d = mk ?loc ?attrs (Pexp_fun (a, b, c, d))
-  let function_ ?loc ?attrs a = mk ?loc ?attrs (Pexp_function a)
+  let let_ ?loc ?attrs a b c = mk ?loc ?attrs (Pexp_let (Immutable, a, b, c))
+  let fun_ ?(loc = !default_loc) ?attrs a b c d =
+    mk ~loc ?attrs
+      (Pexp_function
+         ( [ { pparam_loc = loc; pparam_desc = Pparam_val (a, b, c) } ]
+         , {mode_annotations = []; ret_type_constraint = None; ret_mode_annotations = []}
+         , Pfunction_body d ))
+  let function_ ?(loc = !default_loc) ?attrs a =
+    mk ~loc ?attrs (Pexp_function
+      ( []
+      , {mode_annotations = []; ret_type_constraint = None; ret_mode_annotations = []}
+      , Pfunction_cases (a, loc, [])))
   let apply ?loc ?attrs a b = mk ?loc ?attrs (Pexp_apply (a, b))
   let match_ ?loc ?attrs a b = mk ?loc ?attrs (Pexp_match (a, b))
   let try_ ?loc ?attrs a b = mk ?loc ?attrs (Pexp_try (a, b))
-  let tuple ?loc ?attrs a = mk ?loc ?attrs (Pexp_tuple a)
+  let tuple ?loc ?attrs a = mk ?loc ?attrs (Pexp_tuple (List.map (fun e -> None, e) a))
   let construct ?loc ?attrs a b = mk ?loc ?attrs (Pexp_construct (a, b))
   let variant ?loc ?attrs a b = mk ?loc ?attrs (Pexp_variant (a, b))
   let record ?loc ?attrs a b = mk ?loc ?attrs (Pexp_record (a, b))
+  let record_unboxed_product ?loc ?attrs a b = mk ?loc ?attrs (Pexp_record_unboxed_product (a, b))
   let field ?loc ?attrs a b = mk ?loc ?attrs (Pexp_field (a, b))
+  let unboxed_field ?loc ?attrs a b = mk ?loc ?attrs (Pexp_unboxed_field (a, b))
   let setfield ?loc ?attrs a b c = mk ?loc ?attrs (Pexp_setfield (a, b, c))
-  let array ?loc ?attrs a = mk ?loc ?attrs (Pexp_array a)
+  let array ?loc ?attrs a = mk ?loc ?attrs (Pexp_array (Mutable, a))
   let ifthenelse ?loc ?attrs a b c = mk ?loc ?attrs (Pexp_ifthenelse (a, b, c))
   let sequence ?loc ?attrs a b = mk ?loc ?attrs (Pexp_sequence (a, b))
   let while_ ?loc ?attrs a b = mk ?loc ?attrs (Pexp_while (a, b))
   let for_ ?loc ?attrs a b c d e = mk ?loc ?attrs (Pexp_for (a, b, c, d, e))
-  let constraint_ ?loc ?attrs a b = mk ?loc ?attrs (Pexp_constraint (a, b))
+  let constraint_ ?loc ?attrs a b = mk ?loc ?attrs (Pexp_constraint (a, Some b, []))
   let coerce ?loc ?attrs a b c = mk ?loc ?attrs (Pexp_coerce (a, b, c))
   let send ?loc ?attrs a b = mk ?loc ?attrs (Pexp_send (a, b))
   let new_ ?loc ?attrs a = mk ?loc ?attrs (Pexp_new a)
-  let setinstvar ?loc ?attrs a b = mk ?loc ?attrs (Pexp_setinstvar (a, b))
+  let setinstvar ?loc ?attrs a b = mk ?loc ?attrs (Pexp_setvar (a, b))
   let override ?loc ?attrs a = mk ?loc ?attrs (Pexp_override a)
   let letmodule ?loc ?attrs a b c = mk ?loc ?attrs (Pexp_letmodule (a, b, c))
   let letexception ?loc ?attrs a b = mk ?loc ?attrs (Pexp_letexception (a, b))
@@ -229,7 +259,7 @@ module Exp = struct
   let lazy_ ?loc ?attrs a = mk ?loc ?attrs (Pexp_lazy a)
   let poly ?loc ?attrs a b = mk ?loc ?attrs (Pexp_poly (a, b))
   let object_ ?loc ?attrs a = mk ?loc ?attrs (Pexp_object a)
-  let newtype ?loc ?attrs a b = mk ?loc ?attrs (Pexp_newtype (a, b))
+  let newtype ?loc ?attrs a b = mk ?loc ?attrs (Pexp_newtype (a, None, b))
   let pack ?loc ?attrs a = mk ?loc ?attrs (Pexp_pack a)
   let open_ ?loc ?attrs a b = mk ?loc ?attrs (Pexp_open (a, b))
 
@@ -238,10 +268,14 @@ module Exp = struct
 
   let extension ?loc ?attrs a = mk ?loc ?attrs (Pexp_extension a)
   let unreachable ?loc ?attrs () = mk ?loc ?attrs Pexp_unreachable
+  let stack ?loc ?attrs e = mk ?loc ?attrs (Pexp_stack e)
   let case lhs ?guard rhs = { pc_lhs = lhs; pc_guard = guard; pc_rhs = rhs }
 
   let binding_op op pat exp loc =
     { pbop_op = op; pbop_pat = pat; pbop_exp = exp; pbop_loc = loc }
+
+  let overwrite ?loc ?attrs a b = mk ?loc ?attrs (Pexp_overwrite (a, b))
+  let hole ?loc ?attrs () = mk ?loc ?attrs Pexp_hole
 end
 
 module Mty = struct
@@ -251,8 +285,9 @@ module Mty = struct
   let attr d a = { d with pmty_attributes = d.pmty_attributes @ [ a ] }
   let ident ?loc ?attrs a = mk ?loc ?attrs (Pmty_ident a)
   let alias ?loc ?attrs a = mk ?loc ?attrs (Pmty_alias a)
-  let signature ?loc ?attrs a = mk ?loc ?attrs (Pmty_signature a)
-  let functor_ ?loc ?attrs a b = mk ?loc ?attrs (Pmty_functor (a, b))
+  let signature ?(loc = !default_loc) ?attrs a =
+    mk ~loc ?attrs (Pmty_signature { psg_items = a; psg_modalities = []; psg_loc = loc })
+  let functor_ ?loc ?attrs a b c = mk ?loc ?attrs (Pmty_functor (a, b, c))
   let with_ ?loc ?attrs a b = mk ?loc ?attrs (Pmty_with (a, b))
   let typeof_ ?loc ?attrs a = mk ?loc ?attrs (Pmty_typeof a)
   let extension ?loc ?attrs a = mk ?loc ?attrs (Pmty_extension a)
@@ -267,7 +302,7 @@ module Mod = struct
   let structure ?loc ?attrs x = mk ?loc ?attrs (Pmod_structure x)
   let functor_ ?loc ?attrs arg body = mk ?loc ?attrs (Pmod_functor (arg, body))
   let apply ?loc ?attrs m1 m2 = mk ?loc ?attrs (Pmod_apply (m1, m2))
-  let constraint_ ?loc ?attrs m mty = mk ?loc ?attrs (Pmod_constraint (m, mty))
+  let constraint_ ?loc ?attrs m mty = mk ?loc ?attrs (Pmod_constraint (m, Some mty, []))
   let unpack ?loc ?attrs e = mk ?loc ?attrs (Pmod_unpack e)
   let extension ?loc ?attrs a = mk ?loc ?attrs (Pmod_extension a)
 end
@@ -284,7 +319,7 @@ module Sig = struct
   let rec_module ?loc a = mk ?loc (Psig_recmodule a)
   let modtype ?loc a = mk ?loc (Psig_modtype a)
   let open_ ?loc a = mk ?loc (Psig_open a)
-  let include_ ?loc a = mk ?loc (Psig_include a)
+  let include_ ?loc a = mk ?loc (Psig_include (a, []))
   let class_ ?loc a = mk ?loc (Psig_class a)
   let class_type ?loc a = mk ?loc (Psig_class_type a)
   let extension ?loc ?(attrs = []) a = mk ?loc (Psig_extension (a, attrs))
@@ -367,10 +402,12 @@ module Cf = struct
 end
 
 module Val = struct
-  let mk ?(loc = !default_loc) ?(attrs = []) ?(prim = []) name typ =
+  let mk ?(loc = !default_loc) ?(attrs = []) ?(prim = [])
+    name typ =
     {
       pval_name = name;
       pval_type = typ;
+      pval_modalities = [];
       pval_attributes = attrs;
       pval_loc = loc;
       pval_prim = prim;
@@ -379,7 +416,7 @@ end
 
 module Md = struct
   let mk ?(loc = !default_loc) ?(attrs = []) name typ =
-    { pmd_name = name; pmd_type = typ; pmd_attributes = attrs; pmd_loc = loc }
+    { pmd_name = name; pmd_type = typ; pmd_modalities = []; pmd_attributes = attrs; pmd_loc = loc }
 end
 
 module Ms = struct
@@ -419,12 +456,12 @@ end
 
 module Incl = struct
   let mk ?(loc = !default_loc) ?(attrs = []) mexpr =
-    { pincl_mod = mexpr; pincl_loc = loc; pincl_attributes = attrs }
+    { pincl_kind = Structure; pincl_mod = mexpr; pincl_loc = loc; pincl_attributes = attrs }
 end
 
 module Vb = struct
   let mk ?(loc = !default_loc) ?(attrs = []) pat expr =
-    { pvb_pat = pat; pvb_expr = expr; pvb_attributes = attrs; pvb_loc = loc }
+    { pvb_pat = pat; pvb_expr = expr; pvb_modes = []; pvb_attributes = attrs; pvb_loc = loc }
 end
 
 module Ci = struct
@@ -450,12 +487,14 @@ module Type = struct
       ptype_kind = kind;
       ptype_private = priv;
       ptype_manifest = manifest;
+      ptype_jkind_annotation = None;
       ptype_attributes = attrs;
       ptype_loc = loc;
     }
 
   let constructor ?(loc = !default_loc) ?(attrs = []) ?(vars = [])
       ?(args = Pcstr_tuple []) ?res name =
+    let vars = List.map (fun var -> var, None) vars in
     {
       pcd_name = name;
       pcd_vars = vars;
@@ -465,10 +504,12 @@ module Type = struct
       pcd_attributes = attrs;
     }
 
-  let field ?(loc = !default_loc) ?(attrs = []) ?(mut = Immutable) name typ =
+  let field ?(loc = !default_loc) ?(attrs = []) ?(mut = Immutable)
+        name typ =
     {
       pld_name = name;
       pld_mutable = mut;
+      pld_modalities = [];
       pld_type = typ;
       pld_loc = loc;
       pld_attributes = attrs;
@@ -505,6 +546,7 @@ module Te = struct
 
   let decl ?(loc = !default_loc) ?(attrs = []) ?(vars = [])
       ?(args = Pcstr_tuple []) ?res name =
+    let vars = List.map (fun var -> var, None) vars in
     {
       pext_name = name;
       pext_kind = Pext_decl (vars, args, res);

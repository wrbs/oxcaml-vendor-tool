--- a/runtime/js/domain.js
+++ b/runtime/js/domain.js
@@ -216,6 +216,16 @@
   return 0;
 }

+//Provides: caml_atomic_compare_exchange_field
+//Version: >= 5
+function caml_atomic_compare_exchange_field(ref, field, o, n) {
+  var old = ref[field + 1];
+  if (old === o) {
+    ref[field + 1] = n;
+  }
+  return old;
+}
+
 //Provides: caml_atomic_set_field
 //Version: >= 5
 function caml_atomic_set_field(ref, field, v) {
--- a/runtime/wasm/domain.wat
+++ b/runtime/wasm/domain.wat
@@ -329,6 +329,19 @@
             (return (ref.i31 (i32.const 1)))))
       (ref.i31 (i32.const 0)))

+   (func (export "caml_atomic_compare_exchange_field")
+      (param $ref (ref eq)) (param $field (ref eq)) (param $o (ref eq)) (param $n (ref eq)) (result (ref eq))
+      (local $b (ref $block))
+      (local $idx i32)
+      (local $old (ref eq))
+      (local.set $b (ref.cast (ref $block) (local.get $ref)))
+      (local.set $idx (i32.add (i31.get_s (ref.cast (ref i31) (local.get $field))) (i32.const 1)))
+      (local.set $old (array.get $block (local.get $b) (local.get $idx)))
+      (if (ref.eq (local.get $old) (local.get $o))
+         (then
+            (array.set $block (local.get $b) (local.get $idx) (local.get $n))))
+      (local.get $old))
+
    (func (export "caml_atomic_exchange_field")
       (param $ref (ref eq)) (param $field (ref eq)) (param $v (ref eq)) (result (ref eq))
       (local $b (ref $block))

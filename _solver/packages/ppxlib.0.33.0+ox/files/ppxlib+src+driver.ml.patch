--- a/src/driver.ml
+++ b/src/driver.ml
@@ -24,6 +24,8 @@ let pretty = ref false
 let styler = ref None
 let output_metadata_filename = ref None
 let corrected_suffix = ref ".ppx-corrected"
+let raise_embedded_errors_flag = ref false
+let as_merlin = ref false
 
 let ghost =
   object
@@ -31,6 +33,15 @@ let ghost =
     method! location loc = { loc with loc_ghost = true }
   end
 
+let raise_embedded_errors =
+  object
+  inherit Ast_traverse.map as super
+  method! extension extension =
+    if !raise_embedded_errors_flag then
+    extension |> Location.Error.of_extension |> Option.iter ~f:Location.Error.raise;
+    super#extension extension
+  end
+
 let chop_prefix ~prefix x =
   if String.is_prefix ~prefix x then
     Some (String.drop_prefix x (String.length prefix))
@@ -46,7 +57,7 @@ let get_default_path_str : structure -> 
   | [] -> ""
   | { pstr_loc = loc; _ } :: _ -> get_default_path loc
 
-let get_default_path_sig : signature -> string = function
+let get_default_path_sig : signature_item list -> string = function
   | [] -> ""
   | { psig_loc = loc; _ } :: _ -> get_default_path loc
 
@@ -151,7 +162,7 @@ module Transform = struct
     enclose_intf :
       (Expansion_context.Base.t ->
       Location.t option ->
-      Parsetree.signature * Parsetree.signature)
+      Parsetree.signature_item list * Parsetree.signature_item list)
       option;
     instrument : Instrument.t option;
     rules : Context_free.Rule.t list;
@@ -280,13 +291,13 @@ module Transform = struct
       map#structure base_ctxt (List.concat [ attrs; header; st; footer ])
       >>= fun st -> match impl with None -> return st | Some f -> f ctxt st
     in
-    let map_intf ctxt sg_with_attrs =
-      let attrs, sg =
-        List.split_while sg_with_attrs ~f:(function
+    let map_intf ctxt ({ psg_items; _ } as sg) =
+      let attrs, psg_items =
+        List.split_while psg_items ~f:(function
           | { psig_desc = Psig_attribute _; _ } -> true
           | _ -> false)
       in
-      let file_path = get_default_path_sig sg in
+      let file_path = get_default_path_sig psg_items in
       let base_ctxt =
         Expansion_context.Base.top_level ~tool_name ~file_path ~input_name
       in
@@ -295,12 +306,14 @@ module Transform = struct
         | None -> ([], [])
         | Some f ->
             let whole_loc =
-              loc_of_list sg ~get_loc:(fun sg -> sg.Parsetree.psig_loc)
+              loc_of_list psg_items ~get_loc:(fun sg -> sg.Parsetree.psig_loc)
             in
             gen_header_and_footer Signature_item whole_loc (f base_ctxt)
       in
-      map#signature base_ctxt (List.concat [ attrs; header; sg; footer ])
-      >>= fun sg -> match intf with None -> return sg | Some f -> f ctxt sg
+      map#signature_items base_ctxt (List.concat [ attrs; header; psg_items; footer ])
+      >>= fun psg_items ->
+        let sg = { sg with psg_items } in
+        match intf with None -> return sg | Some f -> f ctxt sg
     in
     { t with impl = Some map_impl; intf = Some map_intf }
 
@@ -526,12 +539,12 @@ let get_whole_ast_passes ~hook ~expect_m
   in
   linters @ preprocess @ before_instrs @ make_generic cts @ after_instrs
 
-let apply_transforms (type t) ~tool_name ~file_path ~field ~lint_field
+let apply_transforms (type ts) ~tool_name ~file_path ~field ~lint_field
     ~dropped_so_far ~hook ~expect_mismatch_handler ~input_name ~f_exception
-    ~embed_errors x =
+    ~embed_errors ~append_error x =
   let exception
     Wrapper of
-      t list
+      ts
       * label loc list
       * (location * label) list
       * exn
@@ -587,7 +600,7 @@ let apply_transforms (type t) ~tool_name
     in
     Ok (finish acc)
   with Wrapper (x, dropped, lint_errors, exn, errors) ->
-    Error (finish (f_exception exn :: x, dropped, lint_errors, errors))
+    Error (finish (append_error (f_exception exn) x, dropped, lint_errors, errors))
 
 (*$*)
 
@@ -617,7 +630,12 @@ let exn_to_sig_extension exn =
 
 let error_to_extension error ~(kind : Kind.t) =
   match kind with
-  | Intf -> Intf_or_impl.Intf [ error_to_sig_extension error ]
+  | Intf ->
+    Intf_or_impl.Intf
+      { psg_items = [ error_to_sig_extension error ]
+      ; psg_modalities = []
+      ; psg_loc = Location.none
+      }
   | Impl -> Intf_or_impl.Impl [ error_to_str_extension error ]
 
 let exn_to_extension exn ~(kind : Kind.t) =
@@ -703,6 +721,7 @@ let map_structure_gen st ~tool_name ~hoo
   let file_path = get_default_path_str st in
   match
     apply_transforms st ~tool_name ~file_path
+      ~append_error:(fun err st -> err :: st)
       ~field:(fun (ct : Transform.t) -> ct.impl)
       ~lint_field:(fun (ct : Transform.t) -> ct.lint_impl)
       ~dropped_so_far:Attribute.dropped_so_far_structure ~hook
@@ -711,9 +730,15 @@ let map_structure_gen st ~tool_name ~hoo
       ~embed_errors
   with
   | Error (st, lint_errors, errors) ->
-      Error (st |> lint lint_errors |> with_errors errors)
+    Error
+      (st |> lint lint_errors |> with_errors errors |> raise_embedded_errors#structure)
   | Ok (st, lint_errors, errors) ->
-      Ok (st |> lint lint_errors |> cookies_and_check |> with_errors errors)
+    Ok
+      (st
+       |> lint lint_errors
+       |> cookies_and_check
+       |> with_errors errors
+       |> raise_embedded_errors#structure)
 
 let map_structure st =
   match
@@ -725,64 +750,67 @@ let map_structure st =
   with
   | Ok ast | Error ast -> ast
 
-(*$ str_to_sig _last_text_block *)
-
 let map_signature_gen sg ~tool_name ~hook ~expect_mismatch_handler ~input_name
     ~embed_errors =
   Cookies.acknowledge_cookies T;
   if !perform_checks then (
     Attribute.reset_checks ();
     Attribute.collect#signature sg);
-  let lint lint_errors sg =
-    let sg =
+  let lint lint_errors items =
+    let items =
       match lint_errors with
-      | [] -> sg
+      | [] -> items
       | _ ->
-          List.map lint_errors
-            ~f:(fun ({ attr_name = { loc; _ }; _ } as attr) ->
-              Ast_builder.Default.psig_attribute ~loc attr)
-          @ sg
+            List.map lint_errors
+              ~f:(fun ({ attr_name = { loc; _ }; _ } as attr) ->
+                Ast_builder.Default.psig_attribute ~loc attr)
+            @ items
     in
-    sg
+    items
   in
-  let with_errors errors sg =
-    List.map errors ~f:(fun error ->
-        Ast_builder.Default.psig_extension
-          ~loc:(Location.Error.get_location error)
-          (Location.Error.to_extension error)
-          []
-        |> ghost#signature_item)
-    @ sg
+  let with_errors errors items=
+      List.map errors ~f:(fun error ->
+          Ast_builder.Default.psig_extension
+            ~loc:(Location.Error.get_location error)
+            (Location.Error.to_extension error)
+            []
+          |> ghost#signature_item)
+      @ items
   in
-  let cookies_and_check sg =
+  let cookies_and_check items =
     Cookies.call_post_handlers T;
     let errors =
       if !perform_checks then (
         (* TODO: these two passes could be merged, we now have more passes for
            checks than for actual rewriting. *)
         let unused_attributes_errors =
-          Attribute.collect_unused_attributes_errors#signature sg []
+          Attribute.collect_unused_attributes_errors#signature_items items []
         in
         let unused_extension_errors =
           if !perform_checks_on_extensions then
-            Extension.collect_unhandled_extension_errors#signature sg []
+            Extension.collect_unhandled_extension_errors#signature_items items []
           else []
         in
         let not_seen_errors = Attribute.collect_unseen_errors () in
         (if !perform_locations_check then
          let open Location_check in
          ignore
-           ((enforce_invariants !loc_fname)#signature sg
+           ((enforce_invariants !loc_fname)#signature_items items
               Non_intersecting_ranges.empty
              : Non_intersecting_ranges.t));
         unused_attributes_errors @ unused_extension_errors @ not_seen_errors)
       else []
     in
-    with_errors errors sg
+    with_errors errors items
   in
-  let file_path = get_default_path_sig sg in
+  let file_path = get_default_path_sig sg.psg_items in
   match
     apply_transforms sg ~tool_name ~file_path
+      ~append_error:(fun err sg ->
+        { psg_items = err :: sg.psg_items
+        ; psg_modalities = sg.psg_modalities
+        ; psg_loc = sg.psg_loc
+        })
       ~field:(fun (ct : Transform.t) -> ct.intf)
       ~lint_field:(fun (ct : Transform.t) -> ct.lint_intf)
       ~dropped_so_far:Attribute.dropped_so_far_signature ~hook
@@ -790,10 +818,23 @@ let map_signature_gen sg ~tool_name ~hoo
       ~f_exception:(fun exn -> exn_to_sig_extension exn)
       ~embed_errors
   with
-  | Error (sg, lint_errors, errors) ->
-      Error (sg |> lint lint_errors |> with_errors errors)
-  | Ok (sg, lint_errors, errors) ->
-      Ok (sg |> lint lint_errors |> cookies_and_check |> with_errors errors)
+  | Error ({psg_items; _} as sg, lint_errors, errors) ->
+    let psg_items =
+      psg_items
+      |> lint lint_errors
+      |> with_errors errors
+      |> raise_embedded_errors#signature_items
+    in
+    Error {sg with psg_items}
+  | Ok ({psg_items; _} as sg, lint_errors, errors) ->
+    let psg_items =
+      psg_items
+      |> lint lint_errors
+      |> cookies_and_check
+      |> with_errors errors
+      |> raise_embedded_errors#signature_items
+    in
+    Ok {sg with psg_items}
 
 let map_signature sg =
   match
@@ -970,46 +1011,45 @@ let add_cookies_str st =
   in
   prefix @ st
 
-(*$ str_to_sig _last_text_block *)
-let extract_cookies_sig sg =
-  let sg =
-    match sg with
+let extract_cookies_sig items =
+  let items =
+    match items with
     | ({
          psig_desc =
            Psig_attribute { attr_name = { txt = "ocaml.ppx.context"; _ }; _ };
          _;
        } as prefix)
       :: sg ->
-        let prefix = Ppxlib_ast.Selected_ast.to_ocaml Signature [ prefix ] in
+        let prefix = Ppxlib_ast.Selected_ast.to_ocaml (List Signature_item) [ prefix ] in
         assert (
           List.is_empty
-            (Astlib.Ast_metadata.drop_ppx_context_sig ~restore:true prefix));
+            (Astlib.Ast_metadata.drop_ppx_context_sig_items ~restore:true prefix));
         sg
-    | _ -> sg
+    | _ -> items
   in
   (* The cli cookies have to be set after restoring the ppx context,
      since restoring the ppx context resets the cookies *)
   List.iter !Cookies.given_through_cli ~f:(fun (name, expr) ->
       Cookies.set T name expr);
-  sg
+  items
 
-let add_cookies_sig sg =
+let add_cookies_sig items =
   let prefix =
-    Astlib.Ast_metadata.add_ppx_context_sig ~tool_name:"ppxlib_driver" []
-    |> Ppxlib_ast.Selected_ast.of_ocaml Signature
+    Astlib.Ast_metadata.add_ppx_context_sig_items ~tool_name:"ppxlib_driver" []
+    |> Ppxlib_ast.Selected_ast.of_ocaml (List Signature_item)
   in
-  prefix @ sg
+  prefix @ items
 
 (*$*)
 
 let extract_cookies (ast : Intf_or_impl.t) : Intf_or_impl.t =
   match ast with
-  | Intf x -> Intf (extract_cookies_sig x)
+  | Intf ({psg_items; _} as sg) -> Intf {sg with psg_items = extract_cookies_sig psg_items}
   | Impl x -> Impl (extract_cookies_str x)
 
 let add_cookies (ast : Intf_or_impl.t) : Intf_or_impl.t =
   match ast with
-  | Intf x -> Intf (add_cookies_sig x)
+  | Intf ({psg_items; _} as sg) -> Intf {sg with psg_items = add_cookies_sig psg_items}
   | Impl x -> Impl (add_cookies_str x)
 
 let corrections = ref []
@@ -1162,7 +1202,7 @@ let process_file (kind : Kind.t) fn ~inp
           | Intf ast -> Pprintast.signature ppf ast
           | Impl ast -> Pprintast.structure ppf ast);
           let null_ast =
-            match ast with Intf [] | Impl [] -> true | _ -> false
+            match ast with Intf { psg_items = []; _ } | Impl [] -> true | _ -> false
           in
           if not null_ast then Stdlib.Format.pp_print_newline ppf ())
   | Dump_ast ->
@@ -1337,6 +1377,10 @@ let shared_args =
        applied before all impl and intf." );
     ("-cookie", Arg.String set_cookie, "NAME=EXPR Set the cookie NAME to EXPR");
     ("--cookie", Arg.String set_cookie, " Same as -cookie");
+    ("-raise-embedded-errors", Arg.Set raise_embedded_errors_flag,
+      "Raise the first embedded error found in the processed AST");
+    ("-allow-deriving-end", Arg.Set Code_matcher.allow_deriving_end,
+      " Allow the use of [@@@deriving.end] (which is deprecated).")
   ]
 
 let () =
@@ -1430,6 +1474,12 @@ let standalone_args =
     ( "-corrected-suffix",
       Arg.Set_string corrected_suffix,
       "SUFFIX Suffix to append to corrected files" );
+    ( "-as-merlin",
+      Arg.Set as_merlin,
+      " Merlin should pass this flag to indicate that the PPX is being run by Merlin. \
+       This allows PPXes to modify their behavior when run by Merlin rather than the \
+       compiler. Merlin override attributes will only be generated when this flag is \
+       included." );
   ]
 
 let get_args ?(standalone_args = standalone_args) () =
@@ -1556,6 +1606,8 @@ let run_as_ppx_rewriter () =
 
 let pretty () = !pretty
 
+let as_merlin () = !as_merlin
+
 let enable_checks () =
   (* We do not enable the locations check here, we currently require that one
      to be specifically enabled. *)
@@ -1565,3 +1617,24 @@ let enable_checks () =
 let enable_location_check () = perform_locations_check := true
 let disable_location_check () = perform_locations_check := false
 let map_structure st = map_structure st
+
+let () =
+  register_transformation
+    "expand_inline"
+    ~rules:[
+      Context_free.Rule.attr_str_floating_expect_and_expand
+        (Attribute.Floating.declare
+           "expand_inline"
+           Structure_item
+           Ast_pattern.(pstr __)
+           (fun x -> x))
+        (fun ~ctxt:_ items -> prettify_odoc_attributes#structure items);
+      Context_free.Rule.attr_sig_floating_expect_and_expand
+        (Attribute.Floating.declare
+           "expand_inline"
+           Signature_item
+           Ast_pattern.(psig __)
+           (fun x -> x.psg_items))
+        (fun ~ctxt:_ items -> prettify_odoc_attributes#signature_items items);
+    ]
+;;

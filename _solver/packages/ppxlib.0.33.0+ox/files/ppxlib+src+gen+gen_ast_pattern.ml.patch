--- a/src/gen/gen_ast_pattern.ml
+++ b/src/gen/gen_ast_pattern.ml
@@ -22,7 +22,9 @@ let assert_no_attributes ~path ~prefix =
 
 let gen_combinator_for_constructor ?wrapper path ~prefix cd =
   match cd.pcd_args with
-  | Pcstr_record _ -> failwith "Pcstr_record not supported"
+  | Pcstr_record _ ->
+
+      None
   | Pcstr_tuple cd_args ->
       let args = List.mapi cd_args ~f:(fun i _ -> sprintf "x%d" i) in
       let funcs = List.mapi cd_args ~f:(fun i _ -> sprintf "f%d" i) in
@@ -34,7 +36,9 @@ let gen_combinator_for_constructor ?wrap
           | [ x ] -> Some (pvar x)
           | _ -> Some (Pat.tuple (List.map args ~f:pvar)))
       in
-      let exp, _ = apply_parsers funcs (List.map args ~f:evar) cd_args in
+      let exp, _ = apply_parsers funcs (List.map args ~f:evar)
+                     (List.map cd_args ~f:(fun ca -> ca.pca_type))
+      in
       let expected = without_prefix ~prefix cd.pcd_name.txt in
       let body =
         M.expr
@@ -72,9 +76,10 @@ let gen_combinator_for_constructor ?wrap
         List.fold_right funcs ~init:body ~f:(fun func acc ->
             M.expr "fun (T %a) -> %a" A.patt (pvar func) A.expr acc)
       in
-      M.stri "let %a = %a" A.patt
-        (pvar (function_name_of_id ~prefix cd.pcd_name.txt))
-        A.expr body
+      Some (
+        M.stri "let %a = %a" A.patt
+          (pvar (function_name_of_id ~prefix cd.pcd_name.txt))
+          A.expr body)
 
 let gen_combinator_for_record path ~prefix ~has_attrs lds =
   let fields = List.map lds ~f:(fun ld -> fqn_longident path ld.pld_name.txt) in
@@ -98,7 +103,9 @@ let gen_combinator_for_record path ~pref
   in
   let body =
     List.fold_right funcs ~init:body ~f:(fun func acc ->
-        Exp.fun_ (Labelled func) None (M.patt "T %a" A.patt (pvar func)) acc)
+      Ppxlib_jane.Ast_builder.Default.add_fun_param
+        ~loc:!Ast_helper.default_loc
+        (Labelled func) None (M.patt "T %a" A.patt (pvar func)) acc)
   in
   M.stri "let %a = %a" A.patt (pvar (function_name_of_path path)) A.expr body
 
@@ -141,7 +148,7 @@ let gen_td ?wrapper path td =
           common_prefix (List.map cds ~f:(fun cd -> cd.pcd_name.txt))
         in
         let items =
-          List.map cds ~f:(fun cd ->
+          List.filter_map cds ~f:(fun cd ->
               gen_combinator_for_constructor ?wrapper path ~prefix cd)
         in
         match wrapper with
@@ -178,6 +185,8 @@ let gen_td ?wrapper path td =
             ~name:(function_name_of_path path ^ "_attributes")
           :: items
         else items
+    | Ptype_record_unboxed_product _ ->
+        failwith "Gen_ast_pattern.gen_td: unboxed records are not yet supported"
     | Ptype_abstract | Ptype_open -> []
 
 let is_abstract td =

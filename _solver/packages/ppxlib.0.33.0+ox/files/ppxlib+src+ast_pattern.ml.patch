--- a/src/ast_pattern.ml
+++ b/src/ast_pattern.ml
@@ -175,6 +175,9 @@ let map1 (T func) ~f = T (fun ctx loc x 
 let map2 (T func) ~f =
   T (fun ctx loc x k -> func ctx loc x (fun a b -> k (f a b)))
 
+let map3 (T func) ~f =
+  T (fun ctx loc x k -> func ctx loc x (fun a b c -> k (f a b c)))
+
 let map0' (T func) ~f = T (fun ctx loc x k -> func ctx loc x (k (f loc)))
 
 let map1' (T func) ~f =
@@ -183,6 +186,9 @@ let map1' (T func) ~f =
 let map2' (T func) ~f =
   T (fun ctx loc x k -> func ctx loc x (fun a b -> k (f loc a b)))
 
+let map3' (T func) ~f =
+  T (fun ctx loc x k -> func ctx loc x (fun a b c -> k (f loc a b c)))
+
 let map_value (T func) ~f = T (fun ctx loc x k -> func ctx loc (f x) k)
 let map_value' (T func) ~f = T (fun ctx loc x k -> func ctx loc (f loc x) k)
 
@@ -205,6 +211,42 @@ let pack3 t = map t ~f:(fun f x y z -> f
 
 include Ast_pattern_generated
 
+(*-------------------------------------------------------*)
+
+(* override changed nodes *)
+
+let ptyp_arrow label cty1 cty2 =
+  ptyp_arrow label cty1 cty2 drop drop
+
+let ptyp_tuple l = ptyp_tuple (map_value ~f:(List.map ~f:snd) l)
+let ptyp_var l = ptyp_var l drop
+
+let type_declaration = type_declaration ~jkind_annotation:drop
+
+let value_binding ~pat ~expr =
+  value_binding ~pat ~expr ~modes:drop
+
+let value_description ~name ~type_ ~prim =
+  value_description ~name ~type_ ~modalities:drop ~prim
+
+let ppat_constraint pat cty =
+  ppat_constraint pat (some cty) drop
+
+let ppat_tuple l = ppat_tuple (map_value ~f:(List.map ~f:snd) l) drop
+
+let pexp_constraint exp cty =
+  pexp_constraint exp (some cty) drop
+
+let pexp_tuple l = pexp_tuple (map_value ~f:(List.map ~f:snd) l)
+
+let module_declaration = module_declaration ~modalities:drop
+
+let signature t = signature ~items:t ~modalities:drop
+
+let pexp_let rf vbs body = pexp_let immutable rf vbs body
+
+(* ----------------------------------------------------- *)
+
 let echar t = pexp_constant (pconst_char t)
 let estring t = pexp_constant (pconst_string t drop drop)
 let efloat t = pexp_constant (pconst_float t drop)
@@ -235,6 +277,16 @@ let no_label t = cst Asttypes.Nolabel ~t
 let ebool t = pexp_construct (lident (bool' t)) none
 let pbool t = ppat_construct (lident (bool' t)) none
 
+let pexp_function cases =
+  pexp_function nil
+    (function_constraint ~mode_annotations:nil ~ret_mode_annotations:nil
+      ~ret_type_constraint:none)
+    (pfunction_cases cases
+       drop
+       (T (fun _ _ attrs k ->
+            Common.assert_no_attributes attrs;
+            k)))
+
 let extension (T f1) (T f2) =
   T
     (fun ctx loc ((name : _ Loc.t), payload) k ->
@@ -249,7 +301,7 @@ let rec parse_elist (e : Parsetree.expre
   | Pexp_construct ({ txt = Lident "::"; _ }, Some arg) -> (
       Common.assert_no_attributes arg.pexp_attributes;
       match arg.pexp_desc with
-      | Pexp_tuple [ hd; tl ] -> parse_elist tl (hd :: acc)
+      | Pexp_tuple [ None, hd; None, tl ] -> parse_elist tl (hd :: acc)
       | _ -> fail arg.pexp_loc "list")
   | _ -> fail e.pexp_loc "list"
 
